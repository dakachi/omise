<?php
/**
 * omise Gateway API Integration.
 *
 * This object is shared between the omise Single and omise Subscription
 * gateways.
 *
 * @since  1.0.0
 * @package Membership2
 * @subpackage Model
 */
class MS_Gateway_Omise_Api extends MS_Model_Option
{

    const ID = 'omise';

    /**
     * Gateway singleton instance.
     *
     * @since 1.0.0
     * @var   string $instance
     */
    public static $instance;

    /**
     * Holds a reference to the parent gateway (either omise or omiseplan)
     *
     * @since 1.0.1.0
     * @var   MS_Gateway_omise|MS_Gateway_omiseplan
     */
    protected $_gateway = null;

    /**
     * Sets the parent gateway of the API object.
     *
     * The parent gateway object is used to fetch the API keys.
     *
     * @since 1.0.1.0
     * @param MS_Gateway $gateway The parent gateway.
     */
    public function set_gateway($gateway)
    {
        static $omise_Loaded = false;

        if (!$omise_Loaded) {
            // require_once MS_Plugin::instance()->dir . '/lib/omise-php/lib/omise.php';

            do_action(
                'ms_gateway_omise_load_omise_lib_after',
                $this
            );

            $omise_Loaded = true;
        }

        $this->_gateway = $gateway;

        $secret_key = $this->_gateway->get_secret_key();
        $public_key = $this->_gateway->get_publishable_key();
        // OmiseCharge::setApiKey( $secret_key );
        define('OMISE_PUBLIC_KEY', $public_key);
        define('OMISE_SECRET_KEY', $secret_key);
    }

    /**
     * Get Member's omise Customer Object, creates a new customer if not found.
     *
     * @since  1.0.0
     * @internal
     *
     * @param MS_Model_Member $member The member.
     * @param string $token The credit card token.
     */
    public function get_omise_customer($member, $token)
    {
        $customer = $this->find_customer($member);
        if (empty($customer)) {
            $customer = OmiseCustomer::create(
                array(
                    'card'  => $token,
                    'email' => $member->email,
                )
            );
            $member->set_gateway_profile(self::ID, 'customer_id', $customer->offsetGet('id'));
            $member->save();
        } else {
            $this->add_card($member, $customer, $token);
        }

        return apply_filters(
            'ms_gateway_omise_get_omise_customer',
            $customer,
            $member,
            $this
        );
    }

    /**
     * Get Member's omise Customer Object.
     *
     * @since  1.0.0
     * @internal
     *
     * @param MS_Model_Member $member The member.
     */
    public function find_customer($member)
    {
        $customer_id = $member->get_gateway_profile(self::ID, 'customer_id');
        $customer    = null;

        if (!empty($customer_id)) {
            $customer = OmiseCustomer::retrieve($customer_id);

            // Seems like the customer was manually deleted on omise website.
            if (isset($customer->deleted) && $customer->deleted) {
                $customer = null;
                $member->set_gateway_profile(self::ID, 'customer_id', '');
            }
        }
        return apply_filters(
            'ms_gateway_omise_find_customer',
            $customer,
            $member,
            $this
        );
    }

    /**
     * Add card info to omise customer profile and to WordPress user meta.
     *
     * @since  1.0.0
     * @api
     *
     * @param MS_Model_Member $member The member model.
     * @param OmiseCustomer $customer The omise customer object.
     * @param string $token The omise card token generated by the gateway.
     */
    public function add_card($member, $customer, $token)
    {
        $card = false;

        // 1. Save card to omise profile.

        // omise API until version 2015-02-16
        if (!empty($customer->cards)) {
            $card                   = $customer->cards->create(array('card' => $token));
            $customer->default_card = $card->id;
        }

        // omise API since 2015-02-18
        if (!empty($customer->sources)) {
            $card                     = $customer->sources->create(array('card' => $token));
            $customer->default_source = $card->id;
        }

        if ($card) {
            $customer->save();
        }

        /**
         * This action is used by the Taxamo Add-on to check additional country
         * evidence (CC country).
         *
         * @since  1.0.0
         */
        do_action('ms_gateway_omise_credit_card_saved', $card, $member, $this);

        // 2. Save card to WordPress user meta.

        if ($card) {
            $member->set_gateway_profile(
                self::ID,
                'card_exp',
                gmdate('Y-m-d', strtotime("{$card->exp_year}-{$card->exp_month}-01"))
            );
            $member->set_gateway_profile(self::ID, 'card_num', $card->last4);
            $member->save();
        }

        do_action(
            'ms_gateway_omise_add_card_info_after',
            $customer,
            $token,
            $this
        );
    }

    /**
     * Creates a one-time charge that is immediately captured.
     *
     * This means the money is instantly transferred to our own omise account.
     *
     * @since  1.0.0
     * @internal
     *
     * @param  OmiseCustomer $customer omise customer to charge.
     * @param  float $amount Amount in currency (i.e. in USD, not in cents)
     * @param  string $currency 3-digit currency code.
     * @param  string $description This is displayed on the invoice to customer.
     * @return M2_omise_Charge The resulting charge object.
     */
    public function charge($customer, $amount, $currency, $description)
    {

        $amount = apply_filters(
            'ms_gateway_omise_charge_amount',
            $amount,
            $currency
        );

        $charge = OmiseCharge::create(
            array(
                'card'    => $customer,
                'amount'      => intval($amount) * 100, // Amount in cents!
                'currency'    => strtolower($currency),
                'description' => $description,
            )
        );

        return apply_filters(
            'ms_gateway_omise_charge',
            $charge,
            $customer,
            $amount,
            $currency,
            $description,
            $this
        );
    }

    /**
     * Fetches an existing subscription from omise and returns it.
     *
     * If the specified customer did not subscribe to the membership then
     * boolean FALSE will be returned.
     *
     * @since  1.0.0
     * @internal
     *
     * @param  OmiseCustomer $customer omise customer to charge.
     * @param  MS_Model_Membership $membership The membership.
     * @return M2_omise_Subscription|false The resulting charge object.
     */
    public function get_subscription($customer, $membership)
    {
        return false;
    }

    /**
     * Creates a subscription that starts immediately.
     *
     * @since  1.0.0
     * @internal
     *
     * @param  OmiseCustomer $customer omise customer to charge.
     * @param  MS_Model_Invoice $invoice The relevant invoice.
     * @return M2_omise_Subscription The resulting charge object.
     */
    public function subscribe($customer, $invoice)
    {
        return false;
    }

    /**
     * Creates or updates the payment plan specified by the function parameter.
     *
     * @since  1.0.0
     * @internal
     *
     * @param array $plan_data The plan-object containing all details for omise.
     */
    public function create_or_update_plan($plan_data)
    {

    }

    /**
     * Creates or updates the coupon specified by the function parameter.
     *
     * @since  1.0.0
     * @internal
     *
     * @param array $coupon_data The object containing all details for omise.
     */
    public function create_or_update_coupon($coupon_data)
    {
        // no coupon
    }

    /**
     * Little hack to force the plugin to store/load the omise_api data in same
     * option-field as the omise-gateway settings.
     *
     * @since  1.0.0
     * @return string
     */
    public function option_key()
    {
        // Option key should be all lowercase.
        $key = 'ms_gateway_omise';

        // Network-wide mode uses different options then single-site mode.
        if (MS_Plugin::is_network_wide()) {
            $key .= '-network';
        }

        return $key;
    }
}
//https://www.omise.co/customers-api
